#+TITLE: Orgmode publish
#+SETUPFILE: setupfile.org

* Custom CSS & JS

#+begin_src css :tangle ../src/assets/styles.css :mkdirp yes
  .highlight { background: gold; }

  ul {
    padding-left: 1em;
    list-style: none;
  }

  ul li::before {
    content: "\21FE";
    color: darkgreen;
    font-weight: bold;
    display: inline-block;
    width: 1em;
    margin-left: -0.5em;
    font-size: 14pt;
  }
#+end_src

#+begin_src js :tangle ../src/assets/script.js :mkdirp yes
  const $ = document.querySelector.bind(document)
  const $$ = document.querySelectorAll.bind(document)

  $$("[class^='section-number-']").forEach((section) => {
    const linkTarget = section.parentNode.id.match(/^org/) ? section.innerText : section.parentNode.id
    section.innerHTML = `<a href="#${linkTarget}">ยง<a name="${linkTarget}"></a></a>`
  })
#+end_src

* Export
** Install dependencies
Only run this once.

#+name: install
#+begin_src emacs-lisp :task yes :doc "Install dependencies required for export" :shebang "#!/usr/bin/env emacs --script"
  ; Run: java -jar target/et.jar export.org install
  ;      bb -cp src -m jakub-stastny.et.runner export.org install
  ;      clojure -M -m jakub-stastny.et.runner export.org install

  (package-initialize)

  (add-to-list 'package-archives
               '("melpa" . "http://melpa.org/packages/"))
  (add-to-list 'package-archives
               '("org" . "http://orgmode.org/elpa/"))

  (package-refresh-contents)

  (dolist (pkg '(htmlize css-mode ruby-mode clojure-mode))
    (package-install pkg))
#+end_src

** Publishing script

#+name: publish
#+begin_src emacs-lisp :task yes :doc "Export documentation" :shebang "#!/usr/bin/env emacs --script"
  ; Run: java -jar target/et.jar export.org publish
  ;      bb -cp src -m jakub-stastny.et.runner export.org publish
  ;      clojure -M -m jakub-stastny.et.runner export.org publish

  ;; Set up load paths.
  (package-initialize)

  (require 'ox-publish)

  (setq org-publish-project-alist
        '(
          ("et"
           :components ("et.org" "et.assets" "et.downloads"))
          ("et.org"
           :base-directory "."
           :publishing-directory "doc"
           :base-extension "org"
           :exclude "setupfile\\|README.org"
           :recursive f
           :publishing-function org-html-publish-to-html
           :headline-levels 4
           :auto-preamble f)
          ("et.assets"
           :base-directory "src/assets"
           :publishing-directory "doc/assets"
           :base-extension "css\\|js"
           :recursive f
           :publishing-function org-publish-attachment)
          ("et.downloads"
           :base-directory "target"
           :publishing-directory "doc/downloads"
           :base-extension "jar\\|bin"
           :recursive f
           :publishing-function org-publish-attachment)))

  ;; Set a theme that looks well when exported into HTML.
  (load-theme 'tsdh-light)

  ;; Publish.
  (setq org-html-htmlize-output-type 'css)

  (org-mode)
  (org-publish-project "et")
#+end_src

** Export by-passing Org Mode cache

#+name: republish
#+begin_src sh :task yes :doc "Re-publish, bypassing the cache"
  # Run: java -jar target/et.jar export.org republish
  #      bb -cp src -m jakub-stastny.et.runner export.org republish
  #      clojure -M -m jakub-stastny.et.runner export.org republish
  rm -rf doc ~/.org-timestamps
  bb -cp src -m jakub-stastny.et.runner chapters/export.org publish
#+end_src


* Regenerate the documentation

** TODO: move files from target to the root
#+name: update-docs
#+begin_src sh :task yes
  # <<<<<<< Updated upstream:chapters/export.org
  bb -cp src -m jakub-stastny.et.runner chapters/build.org uber || exit 1
  bb -cp src -m jakub-stastny.et.runner chapters/export.org republish || exit 1
  mv doc doc.regenerated
  git stash
  echo "~ Switching to doc"
  git checkout doc || exit 1
  rm -rf doc
  mv doc.regenerated doc
  git add doc
  git commit -m "Update docs"
  echo "~ Switching back to dev"
  git checkout dev
  git stash pop
#+end_src

#+begin_src sh
  git checkout --orphan src
  git rm --cached $(git status | grep "new file:" | awk '{ print $3 }')
  git commit --allow-empty -m "Initial empty commit"
#+end_src
