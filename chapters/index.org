#+TITLE: Emacs tasks (ET)
#+SETUPFILE: setupfile.org

* About
ET is a simple build tool like ~make~, but for literate programming environments.

* Installation
** Java JAR
Note that this way you can only use the default runner.

#+begin_src sh
  wget https://github.com/jakub-stastny/et/raw/doc/doc/downloads/et.jar
#+end_src

** Babashka with [[https://github.com/babashka/bbin][bbin]]
- Get SHA of the latest commit on the [[https://github.com/jakub-stastny/et/tree/src][src branch]]: ~git rev-parse origin/src~
- Run ~bbin install git@github.com:jakub-stastny/et.git --as et --git/sha <SHA>~

** TODO Upload to Clojars
- Add badge to the README & index.
- Would this only be for custom runners or is there a way to proxy via ~clj~? Maybe ~-X:et "a b c d"~, although that's inconvenient.

* Usage
It allows you to run tasks defined in code blocks in org-mode files, such as this chapters/index.org.

Let's define a task:

#+begin_src org
  ,#+name: demo1
  ,#+begin_src sh :task yes
    echo "Hey there literates!"
  ,#+end_src
#+end_src

#+name: demo1
#+begin_src sh :task yes :exports none
  echo "Hey there literates!"
#+end_src

And now let's run it:
#+begin_src sh :results verbatim :exports both :dir ..
  java -jar target/et.jar chapters/index.org demo1
#+end_src

#+RESULTS:
: ~ Running task demo1 from chapters/index.org.
: ~ Running $ sh /tmp/demo1.sh
:
: Hey there literates!

** Command-line arguments
Let's try another example, this time in Ruby:

#+begin_src org
  ,#+name: demo2
  ,#+begin_src ruby :task yes
    ARGV.each { |name| puts "Hey there #{name}!" }
  ,#+end_src
#+end_src

#+name: demo2
#+begin_src ruby :task yes :exports none
  ARGV.each { |name| puts "Hey there #{name}!" }
#+end_src

Let's run it, passing it random arguments:
#+begin_src sh :results verbatim :exports both :dir ..
  java -jar target/et.jar chapters/index.org demo2 Petr Pavel Jakub
#+end_src

#+RESULTS:
: ~ Running task demo2 from chapters/index.org and args ["Petr" "Pavel" "Jakub"].
: ~ Running $ ruby /tmp/demo2.ruby Petr Pavel Jakub
:
: Hey there Petr!
: Hey there Pavel!
: Hey there Jakub!

** Custom shebang
Let's say our code is in Clojure, but we really want to use [[https://babashka.org/][babashka]] to run it:

#+begin_src org
  ,#+name: demo3
  ,#+begin_src clojure :task yes :shebang "#!/usr/bin/env bb"
    (println "Finally some parenthesis!")
  ,#+end_src
#+end_src

#+name: demo3
#+begin_src clojure :task yes :shebang "#!/usr/bin/env bb" :exports none
  (println "Finally some parenthesis!")
#+end_src

#+begin_src sh :results verbatim :exports both :dir ..
  java -jar target/et.jar chapters/index.org demo3
#+end_src

#+RESULTS:
: ~ Running task demo3 from chapters/index.org.
: ~ Running $ /usr/bin/env bb /tmp/demo3.clj
:
: Finally some parenthesis!

*** Note on header arguments
At the moment ET doesn't really parse Org Mode intelligently, it only scans for the code blocks. Hence it doesn't support:

- Global header args using ~#+PROPERTY: header-args :shebang "..."~.
- Per-section header args using ~:PROPERTIES:~ such as with ~:header-args: :shebang "..."~.

[[https://orgmode.org/manual/Using-Header-Arguments.html][Org Mode manual on header arguments]]

** Documentation and the ~-T~ argument
Instead of using ~:task yes~ we can use ~:doc "Task help"~

#+begin_src org
  ,#+name: demo4
  ,#+begin_src sh :doc "Fourth demo"
    echo "This is the fourth demo"
  ,#+end_src

  ,#+name: demo5
  ,#+begin_src sh :doc "Fifth demo"
    echo "This is the fifth demo"
  ,#+end_src
#+end_src

#+name: demo4
#+begin_src sh :doc "Fourth demo" :exports none
  echo "This is the fourth demo"
#+end_src

#+name: demo5
#+begin_src sh :doc "Fifth demo" :exports none
  echo "This is the fifth demo"
#+end_src

#+begin_src sh :results verbatim :exports both :dir ..
  java -jar target/et.jar -T chapters/index.org
#+end_src

#+RESULTS:
: ~ Running built-in task tasks and args ("chapters/index.org").
:
: Available tasks
:
: Namespace chapters/index.org:
: demo4       Fourth demo.
: demo5       Fifth demo.

Note that only documented tasks are shown.

The ~-T~ options requires one or more ~.org~ files as an arguments. If you want to see all the tasks from all the namespaces, just use shell globs: ~et -T chapters/*.org~.

* TODO Directives
- No noweb.
- PWD/PROJECT_ROOT?, FILE, ET (to expand alias).

- *Next chapter:* [[./custom-runner.org][writing a custom runner]].
