#+TITLE: Emacs tasks (ET)
#+SETUPFILE: setupfile.org

* Installation
** TODO GraalVM-compiled binary
Note that this way you can only use the default runner.

Check out this [[https://maksimrv.medium.com/compile-clojure-to-native-binary-using-graalvm-b31d1cc9ec76][article]].

#+begin_src sh
  wget https://github.com/jakub-stastny/et/raw/doc/downloads/et
#+end_src

** Java JAR
Note that this way you can only use the default runner.

#+begin_src sh
  wget https://github.com/jakub-stastny/et/raw/doc/downloads/et.jar
#+end_src

** TODO Babashka with [[https://github.com/babashka/bbin][bbin]]

** TODO Upload to Clojars
- Add badge to the README & index.
- Clojars with ~-X:et~?

* About
ET is a simple build tool like ~make~, but for literate programming environments.

It allows you to run tasks defined in code blocks in org-mode files, such as this chapters/index.org.

Let's define a task:

#+begin_src org
  ,#+name: demo1
  ,#+begin_src sh :task yes
    echo "Hey there literates!"
  ,#+end_src
#+end_src

#+name: demo1
#+begin_src sh :task yes :exports none
  echo "Hey there literates!"
#+end_src

And now let's run it:
#+begin_src sh :results verbatim :exports both
  java -jar target/et.jar chapters/index.org demo1
#+end_src

#+RESULTS:
: ~ Task definition {:path "chapters/index.org", :args [], :task {}, :task-name "demo1"}
: ~ Running task demo1 {:task yes}
:
: Hey there literates!

** Command-line arguments
Let's try another example, this time in Ruby:

#+begin_src org
  ,#+name: demo2
  ,#+begin_src ruby :task yes
    ARGV.each { |name| puts "Hey there #{name}!" }
  ,#+end_src
#+end_src

#+name: demo2
#+begin_src ruby :task yes :exports none
  ARGV.each { |name| puts "Hey there #{name}!" }
#+end_src

Let's run it, passing it random arguments:
#+begin_src sh :results verbatim :exports both
  java -jar target/et.jar chapters/index.org demo2 Petr Pavel Jakub
#+end_src

#+RESULTS:
: ~ Task definition {:path "chapters/index.org", :args ["Petr" "Pavel" "Jakub"], :task {}, :task-name "demo2"}
: ~ Running task demo2 {:task yes, :shebang "#!/usr/bin/env ruby"}
:
: Hey there Petr!
: Hey there Pavel!
: Hey there Jakub!

** Custom shebang
Let's say our code is in Clojure, but we really want to use [[https://babashka.org/][babashka]] to run it:

#+begin_src org
  ,#+name: demo3
  ,#+begin_src clojure :task yes :shebang "#!/usr/bin/env bb"
    (println "Finally some parenthesis!")
  ,#+end_src
#+end_src

#+name: demo3
#+begin_src clojure :task yes :shebang "#!/usr/bin/env bb" :exports none
  (println "Finally some parenthesis!")
#+end_src

#+begin_src sh :results verbatim :exports both
  java -jar target/et.jar chapters/index.org demo3
#+end_src

#+RESULTS:
: ~ Task definition {:path "chapters/index.org", :args [], :task {}, :task-name "demo3"}
: ~ Running task demo3 {:task yes, :shebang "#!/usr/bin/env bb", :exports none}
:
: Finally some parenthesis!

*** Note on header arguments
At the moment ET doesn't really parse Org Mode intelligently, it only scans for the code blocks. Hence it doesn't support:

- Global header args using ~#+PROPERTY: header-args :shebang "..."~.
- Per-section header args using ~:PROPERTIES:~ such as with ~:header-args: :shebang "..."~.

[[https://orgmode.org/manual/Using-Header-Arguments.html][Org Mode manual on header arguments]]

** Documentation and the ~-T~ argument
Instead of using ~:task yes~ we can use ~:doc "Task help"~

#+begin_src org
  ,#+name: demo4
  ,#+begin_src sh :doc "Fourth demo"
    echo "This is the fourth demo"
  ,#+end_src

  ,#+name: demo5
  ,#+begin_src sh :doc "Fifth demo"
    echo "This is the fifth demo"
  ,#+end_src
#+end_src

#+name: demo4
#+begin_src sh :doc "Fourth demo" :exports none
  echo "This is the fourth demo"
#+end_src

#+name: demo5
#+begin_src sh :doc "Fifth demo" :exports none
  echo "This is the fifth demo"
#+end_src

#+begin_src sh :results verbatim :exports both
   java -jar target/et.jar -T chapters/index.org
#+end_src

#+RESULTS:
: ~ Task definition {:task {:name :tasks, :fn #object[jakub_stastny.et.runner$fn__190 0x61edc883 "jakub_stastny.et.runner$fn__190@61edc883"]}, :args ("chapters/index.org")}
: TODO: Implement built-in task :tasks

* TODO Directives
- No noweb.

- *Next chapter:* [[./custom-runner.org][writing a custom runner]].
