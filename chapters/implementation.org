#+TITLE: ET implementation
#+SETUPFILE: setupfile.org

* Implementation

* TODO Implementation
- <<FILE>> PWDâ€¦noweb or custom?

* TODO Babashka support
- Use babashka/fs etc in CLJ (deps.edn).
- #?@(:bb "Babashka!" :clj "CLJ!)
- XDG_CACHE_HOME: (str/join "/" (xdg-cache-home) "et")
- et.<basename>.<task-file>.<task> such as bm-core.chapters.dev.main.build.sh.

#+begin_src clojure :tangle ../src/jakub_stastny/et/utils.clj :mkdirp yes
  (ns jakub-stastny.et.utils)

  (def ^:private colours {:red 31 :green 32 :yellow 33
                          :blue 34 :purple 35 :cyan 36 :grey 37})

  ; https://stackoverflow.com/questions/4842424/list-of-ansi-color-escape-sequences
  (def ^:private font-effects {:normal 0 :bold 1})

  (defn colour
    "Wraps text in ANSI colour escape sequence"
    ([c text]
     (colour c :normal text))

    ([c font-effect text]
     (if (= (System/getenv "TERM") "xterm-256color")
       (let [colour-code (colours c)
             font-effect-code (font-effects font-effect)]
         (str "\033[" font-effect-code ";" colour-code "m" text "\033[0m"))
       text)))

  (defn abort [& chunks]
    (println (apply str (colour :red "Error: ") chunks))
    (System/exit 1))

  (defn puts [& chunks]
    (println (apply str chunks)))

  (defn info [& chunks]
    (apply puts (colour :white :bold "~ ") chunks))

  (defn task-type [task]
    (cond
      (contains? task :fn) :built-in
      (and (contains? task :path) (contains? task :task-name)) :custom
      true :invalid))

  (defmulti pr-task "Print task" task-type)

  (defmethod pr-task :built-in [{:keys [task-name args]}]
    (let [base-str (str "built-in task " (colour :yellow (name task-name)))]
      (if (empty? args)
        base-str
        (str base-str " and args " (colour :cyan (str args))))))

  (defmethod pr-task :custom [{:keys [task-name path args]}]
    (let [base-str (str "task " (colour :yellow (name task-name)) " from " (colour :green path))]
      (if (empty? args)
        base-str
        (str base-str " and args " (colour :cyan (str args))))))

  (defmethod pr-task :invalid [{:keys [task-name] :as task}]
    (str (colour :red "invalid task " task-name ": " (pr-str task))))

  (defn throw-user-error
    "..."
    [message]
    (throw (ex-info message {:type :user-error})))

  (defn rethrow
    "..."
    [error]
    (throw (ex-info
            (str "rethrow " (ex-message error))
            (merge {:rethrown true} (ex-data error))
            error)))
#+end_src

#+begin_src clojure :tangle ../src/jakub_stastny/et/built_ins.clj :mkdirp yes
  (ns jakub-stastny.et.built-ins
    "Built-in tasks."
    (:require [jakub-stastny.et.org :as org]
              [jakub-stastny.et.utils :refer :all]))

  (defn tasks
    "Built-in task to show all tasks in given paths."
    [paths]
    (puts "\n" (colour :blue :bold "Available tasks"))
    (doseq [path paths]
      (let [tasks (filter (fn [task] (get-in task [:opts :doc])) (org/load-tasks path))]
        (when-not (empty? tasks)
          (puts "\nNamespace " (colour :cyan path) ":")
          (doseq [{:keys [task-name opts]} tasks]
            (puts (colour :yellow task-name)
                  (apply str (repeat (- 12 (count task-name)) " "))
                  (opts :doc) "."))))))

  (defn help
    "Built-in task to show help.
     Unlike other tasks can take 0 arguments."
    [& args]
    (puts "\n" (colour :green :bold "Help:"))
    (puts "-T|--tasks task-file.org           # Show documented tasks in given task files")
    (puts "task-file.org task-name arg1 arg2  # Run task-name from task-file.org with arguments arg1 arg2"))

  (def ^:private built-in-tasks
    {:tasks tasks :help help})

  (defn- make-built-in-task
    "Wrap fn as a task." [name]
    {:task-name name :fn (built-in-tasks name)})

  (defn get-task
    "Get a built-in task. Defaults to the help task."
    [arg] (cond
            (some #(= arg %) ["-T" "--tasks" :tasks])
            (make-built-in-task :tasks)

            (some #(= arg %) ["-h" "-H" "--help" :help])
            (make-built-in-task :help)))
#+end_src

*** TODO -v for verbose, shut up otherwise

#+begin_src clojure :tangle ../src/jakub_stastny/et/config.clj :mkdirp yes
  (ns jakub-stastny.et.config
    (:require [jakub-stastny.et.built-ins :as built-ins]))

  (defn args-to-tasks [args]
    (reduce
     (fn [acc i]
       (cond
         ;; First argument starting with a dash (-T, -h etc).
         (and (empty? acc) (re-matches #"-{1,2}\w+" i))
         (conj acc (built-ins/get-task i))

         ;; Path name as the first argument (i. e. README.org).
         (and
          (re-find #"\.org$" i)
          (nil? (last acc)))
         (conj acc {:path i :args []})

         ;; -T README.org
         (and
          (last acc)
          (nil? ((last acc) :task-name))
          (not (= (get-in (last acc) [:task :task-name]) :tasks)))
         (conj (butlast acc)
               (assoc-in (last acc) [:task-name] i))

         ;; Add to args.
         true
         (conj (butlast acc)
               (update-in (last acc) [:args] #(conj % i)))))
     []
     args))

  (defn task?
    "..."
    [example]
    (or (= (example :task) (symbol "yes")) ((example :opts) :doc)))

  (def default-config
    {:args-to-tasks args-to-tasks
     :task? task?
     :exts {:clojure "clj" :emacs-lisp "el"}
     :cmds {:clojure "clojure -M"}        ; -M -m to run -main OR bb
     :exec-fn clojure.java.shell/sh}) ; Or bb.shell https://github.com/babashka/process
#+end_src

*** TODO spec: validate keys of config (run)
*** TODO Allow overriding built-in tasks in config

#+begin_src clojure :tangle ../src/jakub_stastny/et/runner.clj :mkdirp yes
  (ns jakub-stastny.et.runner
    "Main namespace. Provides the default runner as well as the `run`
    fn for creating custom runners with their own custom config."
    (:gen-class)
    (:require [clojure.string :as str]
              [clojure.java.shell]
              [jakub-stastny.et.utils :refer :all]
              [jakub-stastny.et.config :as config]
              [jakub-stastny.et.built-ins :as built-ins]
              [jakub-stastny.et.org :as org]))

  (defmulti exec-task
    "Docstring"
    (fn [task _] (task-type task)))

  (defmethod exec-task :built-in [task _]
    ((task :fn) (task :args)))

  (defmethod exec-task :custom [task config]
    (org/run-task task config))

  (defmethod exec-task :error [task _]
    ;; (throw (ex-info "Don't know how to handle task" {:task task}))
    ((built-ins/get-task :help) :fn))

  ;; Wrapper
  (defn run-task
    "...."
    [task config]
    (info "Running " (pr-task task) ".")
    (exec-task task config))

  (defn handle-att-error [error]
    (println (colour :red "Error in args-to-task:")
             "caused the following error:")
    (println error)
    (System/exit 1))

  (defn handle-user-error
    "Abort on user error, re-throw otherwise."
    [error]
    ;(prn (ex-cause error))
    (let [info (:or (ex-data error) {})]
      (if (= (info :type) :user-error)
        (abort (str (ex-message error) "."))
        (rethrow error))))

  ;; ; This is how you wrap exceptions:
  ;; (def err (try (/ 1 0) (catch Exception e e)))
  ;; (def rer (try (throw (ex-info "rethrown" {:rethrown true} err)) (catch Exception e e)))
  ;; (try
  ;;   (try (+ 1 nil) (catch Exception e (throw (ex-info "Rethrown" {:rethrown true} e))))
  ;;   (catch Exception e
  ;;     (prn e)
  ;;     ;; (prn (ex-cause e))
  ;;     ))
  ;; (System/exit 1)

  (defmacro abort-on-error
    [handler body]
    `(try ~body (catch Exception e# (~handler e#))))

  (defn run
    "Main entry fn for a custom runner.
     Takes command-line `custom-config` that it merges
     into the default one and command-line `args`."
    ([args] (run {} args))

    ([custom-config args]
     (abort-on-error
      handle-user-error
      (let [config (conj config/default-config custom-config)]
        (let [defs (abort-on-error handle-att-error ((config :args-to-tasks) args))]
          (doseq [def defs] (run-task def config)))))))

  (defn -main
    "This is the main entry for the default runner.
     Write a custom runner if you want to customise the config."
    [& args] (run args))
#+end_src

#+begin_src clojure :tangle ../src/jakub_stastny/et/org.clj :mkdirp yes
  (ns jakub-stastny.et.org
    "...."
    (:require [clojure.string :as str]
              [clojure.java.io :as io]
              [jakub-stastny.et.utils :refer :all]
              [clojure.java.shell :refer [sh]] ; chmod +x
              [jakub-stastny.et.parser :as parser]))

  (defn load-tasks
    "..."
    [path]
    (if (.exists (io/as-file path)) ; Replace by fs/exists from bb.
      (filter (fn [example]
                (:task-name example))
              (parser/parse-examples (str/split (slurp path) #"\n")))
      (throw-user-error (str "File " path " doesn't exist"))))

  (defn write-script-2
    "...."
    [script-name command lines task-file-path]
    (let [shebang (str "#!/usr/bin/env " command)
          indent (re-find #"^ *" (first lines))]
      (spit script-name
            (str/join "\n"
                      (apply conj
                             [shebang ""]
                             (map
                              (fn [line] (-> line
                                             (str/replace indent "")
                                             (str/replace #"\{\{\s*[CP]WD\s*\}\}" (System/getenv "PWD"))
                                             (str/replace #"\{\{\s*FILE\s*\}\}" task-file-path)))
                              (conj lines "")))))
      (sh "chmod" "+x" script-name)))

  (defn get-ext
    "..."
    [exts lang] (or (get exts (keyword lang)) lang))

  (defn get-cmd
    "..."
    [cmds lang] (or (get cmds (keyword lang)) lang))

  ; TODO: don't rewrite if same.
  (defn write-script
    "....."
    [{:keys [task-name lang lines opts] :as task} {:keys [exts cmds]}]
    (let [shebang (if (opts :shebang)
                    (str/split (str/replace (opts :shebang) #"#!" "") #"\s+")
                    (str/split (get-cmd cmds lang) #"\s+"))
          script-path (str "/tmp/" (str/replace task-name #"/" "-") "." (get-ext exts lang))]
      (write-script-2 script-path (str/join " " shebang) lines "ReplaceMe.org")
      (conj shebang script-path)))

  (defn exec-task
    "..."
    [task config]
    (let [exec-fn (config :exec-fn)
          base-command (write-script task config)
          command (apply conj base-command (task :args))]
      ;; With exec it'll never run so no prob.
      ;; (prn command) (prn res) (puts)
      (info "Running " (colour :green "$ ") (colour :purple (str/join " " command)) "\n")
      (let [res (apply exec-fn command)]
        (if (= (res :exit) 0)
          (puts (str/trim (res :out)))
          (puts (str/trim (res :err))))
        (System/exit (res :exit)))))

  (defn run-task
    "..."
    [task-def config]
    (let [examples (load-tasks (task-def :path))
          tasks (filter #((config :task?) %) examples)
          task (first (filter #(= (task-def :task-name) (% :task-name)) tasks))]
      (if task
        (exec-task (conj task-def task) config)
        (abort (colour :red "No such task: ")
               (task-def :task-name) ".\n\n"
               (colour :green "Available tasks: ")
               (str/join ", " (map #(% :task-name) tasks)) "."))))
#+end_src

#+begin_src clojure :tangle ../src/jakub_stastny/et/parser.clj :mkdirp yes
  (ns jakub-stastny.et.parser
    "...."
    (:require [clojure.string :as str]
              [clojure.edn :as edn]))

  (defn parse-var [line]
    (str/trim (str/replace line #"^\s*#\+\w+:?(.*)$" "$1")))

  (defn babel-to-map [string]
    (try
      (edn/read-string (str "{" string "}"))
      (catch Exception e
        (throw (ex-info "Parse error" {:type :parse-error :data string :error e})))))

  (defn parse-examples [lines]
    (let [update-last-task
          (fn [tasks update-fn]
            (conj
             (vec (butlast tasks))
             (conj (last tasks) (update-fn (last tasks)))))]

      (first
       (reduce
        (fn [[tasks status] line]
          (cond
            ;; Read name.
            (re-find #"^\s*#\+(?i)name:" line)
            [(conj tasks {:task-name (parse-var line)}) :named]

            ;; Read block options.
            (and (re-find #"^\s*#\+(?i)begin_src" line)
                 (= status :named))
            [(update-last-task
              tasks
              (fn [task]
                (let [raw-opts (str/split (parse-var line) #"\s+")
                      lang (first raw-opts)
                      opts (babel-to-map (str/join " " (rest raw-opts)))]
                  {:lines [] :lang lang :opts opts})))
             :reading]

            ;; Read block options for an unnamed block.
            (re-find #"^\s*#\+(?i)begin_src" line)
            [(conj tasks
                   (let [raw-opts (str/split (parse-var line) #"\s+")
                         lang (first raw-opts)
                         opts (babel-to-map (str/join " " (rest raw-opts)))]
                     {:lines [] :lang lang :opts opts})) :reading]

            ;; Stop reading block body.
            ;; We do need this line even though it does the same
            ;; as the default cond so the end_src line gets skipped.
            (re-find #"^\s*#\+(?i)end_src" line)
            [tasks nil]

            ;; Read body.
            (= status :reading)
            [(update-last-task
              tasks
              (fn [task] {:lines (vec (conj (:lines task) line))}))
             :reading]

            :default [tasks nil]))
        [[] nil]
        lines))))
#+end_src

* Links
- [[./development.org][Developing ET]].
- [[./export.org][Exporting documentation]].
